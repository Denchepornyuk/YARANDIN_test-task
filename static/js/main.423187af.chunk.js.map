{"version":3,"sources":["api/swapi.js","store/actions.js","store/store.js","store/selectors.js","components/FilmCard/FilmCard.js","components/Loader/Loader.js","components/ErrorPage/ErrorPage.js","components/SortBlock/SortBlock.js","components/SearchBlock/SearchBlock.js","components/AddData/AddData.js","components/ModalWindow/ModalWindow.js","components/FilmsPage/FilmsPage.js","components/FilmsPage/index.js","App.js","index.js"],"names":["getFilmsFromServer","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","fetch","then","response","json","stop","apply","this","arguments","ACTIONS_TYPES","initialState","filmsData","isLoading","error","store","createStore","state","length","undefined","action","type","objectSpread2","films","results","applyMiddleware","thunk","rootSelector","selectFilmsList","createSelector","selectFilmsError","_ref2","selectIsLoading","_ref3","FilmCard","selectMovie","map","movie","react_default","createElement","className","key","episode_id","title","concat","release_date","onClick","defaultProps","Loader","ErrorPage","message","href","SortBlock","sortValue","setSortValue","sortColumns","keys","item","Fragment","name","id","checked","onChange","htmlFor","SearchBlock","searchValue","setSearchValue","placeholder","autoComplete","value","e","target","AddData","props","toLocaleUpperCase","elem","index","ModalWindow","_useState","useState","_useState2","slicedToArray","characters","setPeople","_useState3","_useState4","planets","setPlanets","_useState5","_useState6","starships","setStarships","_useState7","_useState8","setError","getDataFromServer","url","catch","data","_x","additionalData","useEffect","toConsumableArray","opening_crawl","components_AddData_AddData","FilmsPage","loadFilms","setSelectMovie","components_Loader_Loader","components_ErrorPage_ErrorPage","components_ModalWindow_ModalWindow","serchFilms","sort","b","localeCompare","filter","toLowerCase","includes","components_SearchBlock_SearchBlock","components_SortBlock_SortBlock","components_FilmCard_FilmCard","connect","dispatch","getFilmsError","finally","App","components_FilmsPage","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.423187af.chunk.js","sourcesContent":["const FILMS_URL = 'https://swapi.co/api/films/';\n\nexport const getFilmsFromServer = async() => (\n  fetch(FILMS_URL).then(response => response.json())\n);\n","import { getFilmsFromServer } from '../api/swapi';\n\nexport const ACTIONS_TYPES = {\n  GET_FILMS: 'GET_FILMS',\n  GET_FILMS_ERROR: 'GET_FILMS_ERROR',\n  START_LOADING: 'START_LOADING',\n  STOP_LOADING: 'STOP_LOADING',\n};\n\nconst getFilms = films => ({\n  type: ACTIONS_TYPES.GET_FILMS,\n  films,\n});\n\nconst getFilmsError = error => ({\n  type: ACTIONS_TYPES.GET_FILMS_ERROR,\n  error,\n});\n\nconst startLoading = () => ({\n  type: ACTIONS_TYPES.START_LOADING,\n});\n\nconst stopLoading = () => ({\n  type: ACTIONS_TYPES.STOP_LOADING,\n});\n\nexport const loadFilms = () => (dispatch) => {\n  dispatch(startLoading());\n\n  getFilmsFromServer()\n    .then(data => dispatch(getFilms(data)))\n    .catch(error => dispatch(getFilmsError(error.message)))\n    .finally(() => dispatch(stopLoading()));\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { ACTIONS_TYPES } from './actions';\n\nconst initialState = {\n  filmsData: [],\n  isLoading: false,\n  error: null,\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIONS_TYPES.GET_FILMS:\n      return {\n        ...state,\n        error: null,\n        filmsData: action.films.results,\n      };\n\n    case ACTIONS_TYPES.START_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case ACTIONS_TYPES.STOP_LOADING:\n      return {\n        ...state,\n        isLoading: false,\n      };\n\n    case ACTIONS_TYPES.GET_FILMS_ERROR:\n      return {\n        ...state,\n        error: action.error,\n        filmsData: [],\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import { createSelector } from 'reselect';\n\nconst rootSelector = state => state;\n\nexport const selectFilmsList = createSelector(\n  rootSelector,\n  ({ filmsData }) => filmsData\n);\n\nexport const selectFilmsError = createSelector(\n  rootSelector,\n  ({ error }) => error,\n);\n\nexport const selectIsLoading = createSelector(\n  rootSelector,\n  ({ isLoading }) => isLoading,\n);\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport './filmCard.scss';\n\nconst FilmCard = ({ films, selectMovie }) => (\n  films.map(movie => (\n    <div className=\"movie__card\" key={movie.episode_id}>\n      <h2>{movie.title}</h2>\n      <p>{`Episode ${movie.episode_id}`}</p>\n      <p>{`Release ${movie.release_date}`}</p>\n      <button\n        type=\"button\"\n        className=\"button movie__button\"\n        onClick={() => selectMovie(movie)}\n      >\n        Show more\n      </button>\n    </div>\n  ))\n);\n\nFilmCard.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nFilmCard.defaultProps = {\n  films: [],\n};\n\nexport default FilmCard;\n","import React from 'react';\nimport './loader.scss';\n\nconst Loader = () => (\n  <div className=\"loader__container\">\n    <div className=\"lds-roller\">\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </div>\n);\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './errorPage.scss';\n\nconst ErrorPage = ({ message }) => (\n  <div className=\"error container\">\n    <p className=\"error__text\">\n      {message}\n    </p>\n\n    <a href=\"/\" className=\"button error__link\">\n      Go to Home\n    </a>\n  </div>\n);\n\nErrorPage.propTypes = {\n  message: PropTypes.string,\n};\n\nErrorPage.defaultProps = {\n  message: 'Sorry, something went wrong!!!',\n};\n\nexport default ErrorPage;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport './sortBlock.scss';\n\nconst SortBlock = ({ sortValue, setSortValue }) => {\n  const sortColumns = {\n    title: 'Name',\n    episode_id: 'Episode',\n    release_date: 'Date',\n  };\n\n  return (\n    <div className=\"sort\">\n      <p className=\"sort__text\">\n        Sort by:\n      </p>\n      {Object.keys(sortColumns).map(item => (\n        <React.Fragment key={item}>\n          <input\n            type=\"radio\"\n            name=\"sort\"\n            className=\"sort__input\"\n            id={`sort-${item}`}\n            checked={item === sortValue}\n            onChange={() => setSortValue(item)}\n          />\n          <label\n            htmlFor={`sort-${item}`}\n            className=\"sort__label\"\n          >\n            {sortColumns[item]}\n          </label>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nSortBlock.propTypes = {\n  sortValue: PropTypes.string,\n  setSortValue: PropTypes.func.isRequired,\n};\n\nSortBlock.defaultProps = {\n  sortValue: 'title',\n};\n\nexport default SortBlock;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport './searchBlock.scss';\n\nconst SearchBlock = ({ searchValue, setSearchValue }) => (\n  <div className=\"search\">\n    <p className=\"search__text\">\n      Search:\n    </p>\n    <input\n      type=\"text\"\n      name=\"search\"\n      className=\"search__input\"\n      placeholder=\"Search by name\"\n      autoComplete=\"off\"\n      value={searchValue}\n      onChange={e => setSearchValue(e.target.value)}\n    />\n  </div>\n);\n\nSearchBlock.propTypes = {\n  searchValue: PropTypes.string,\n  setSearchValue: PropTypes.func.isRequired,\n};\n\nSearchBlock.defaultProps = {\n  searchValue: '',\n};\n\nexport default SearchBlock;\n","import React from 'react';\nimport './addData.scss';\n\nconst AddData = props => (\n  <div>\n    {Object.keys(props).map(item => (\n      <div className=\"add-data\" key={item}>\n        <h3 className=\"add-data__title\">\n          {item.toLocaleUpperCase()}\n        </h3>\n        <div className=\"add-data__description\">\n          {props[item].map((elem, index) => (\n            <p className=\"description__name\" key={elem.name}>\n              {index === props[item].length - 1\n                ? `${elem.name}.`\n                : `${elem.name},`\n              }\n            </p>\n          ))}\n        </div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default AddData;\n","import React, { useState, useEffect } from 'react';\nimport { PropTypes } from 'prop-types';\nimport './modalWindow.scss';\nimport AddData from '../AddData/AddData';\n\nconst ModalWindow = ({ movie, selectMovie }) => {\n  const [characters, setPeople] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [starships, setStarships] = useState([]);\n  const [error, setError] = useState(null);\n\n  const getDataFromServer = async url => (\n    fetch(url)\n      .then(response => response.json())\n      .catch(data => setError(data))\n      .then(data => data)\n  );\n\n  const additionalData = {\n    characters: setPeople,\n    planets: setPlanets,\n    starships: setStarships,\n  };\n\n  useEffect(() => {\n    Object.keys(additionalData).map(item => (\n      movie[item].map(url => (\n        getDataFromServer(url)\n          .then(data => additionalData[item](prev => ([...prev, data])))\n      ))\n    ));\n  }, []);\n\n  return (\n    <div className=\"window container\">\n      <h2 className=\"window__title\">{movie.title}</h2>\n      <p className=\"window__episode\">\n        {`Episode ${movie.episode_id}`}\n      </p>\n      <p className=\"window__release\">\n        {`Release ${movie.release_date}`}\n      </p>\n\n      <p className=\"window__description\">\n        {movie.opening_crawl}\n      </p>\n\n      <button\n        type=\"button\"\n        className=\"window__close\"\n        onClick={() => selectMovie(null)}\n      >\n        X\n      </button>\n\n      {error\n        ? <p>{error}</p>\n        : ''\n      }\n\n      {!characters.length || !planets.length || !starships.length\n        ? <p>Loading...</p>\n        : (\n          <AddData\n            characters={characters}\n            planets={planets}\n            starships={starships}\n          />\n        )\n      }\n\n    </div>\n  );\n};\n\nModalWindow.propTypes = {\n  movie: PropTypes.objectOf.isRequired,\n  selectMovie: PropTypes.func.isRequired,\n};\n\nexport default ModalWindow;\n","import React, { useState, useEffect } from 'react';\nimport { PropTypes } from 'prop-types';\nimport './filmPage.scss';\nimport FilmCard from '../FilmCard/FilmCard';\nimport Loader from '../Loader/Loader';\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport SortBlock from '../SortBlock/SortBlock';\nimport SearchBlock from '../SearchBlock/SearchBlock';\nimport ModalWindow from '../ModalWindow/ModalWindow';\n\nconst FilmsPage = ({\n  films,\n  error,\n  isLoading,\n  loadFilms,\n}) => {\n  useEffect(() => loadFilms(), []);\n\n  const [sortValue, setSortValue] = useState('title');\n  const [searchValue, setSearchValue] = useState('');\n  const [selectMovie, setSelectMovie] = useState(null);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return <ErrorPage />;\n  }\n\n  if (selectMovie) {\n    return (\n      <ModalWindow\n        movie={selectMovie}\n        selectMovie={setSelectMovie}\n      />\n    );\n  }\n\n  const sortFilms = sortValue === 'episode_id'\n    ? [...films].sort((a, b) => (a[sortValue] - b[sortValue]))\n    : [...films].sort((a, b) => (a[sortValue].localeCompare(b[sortValue])));\n\n  const serchFilms = sortFilms.filter(item => (\n    item.title.toLowerCase().includes(searchValue.toLowerCase())\n  ));\n\n  return (\n    <div className=\"star-wars container\">\n      <h1 className=\"star-wars__title\">\n        Stars Wars Films\n      </h1>\n      <div className=\"star-wars__filters\">\n        <SearchBlock\n          searchValue={searchValue}\n          setSearchValue={setSearchValue}\n        />\n        <SortBlock\n          setSortValue={setSortValue}\n          sortValue={sortValue}\n        />\n      </div>\n      <div className=\"star-wars__films\">\n        <FilmCard\n          films={serchFilms}\n          selectMovie={setSelectMovie}\n        />\n      </div>\n    </div>\n  );\n};\n\nFilmsPage.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.shape({})),\n  isLoading: PropTypes.bool,\n  error: PropTypes.string,\n  loadFilms: PropTypes.func.isRequired,\n};\n\nFilmsPage.defaultProps = {\n  films: [],\n  isLoading: false,\n  error: null,\n};\n\nexport default FilmsPage;\n","import { connect } from 'react-redux';\nimport {\n  selectFilmsList,\n  selectFilmsError,\n  selectIsLoading,\n} from '../../store/selectors';\nimport { loadFilms } from '../../store/actions';\nimport FilmsPage from './FilmsPage';\n\nconst mapStateToProps = state => ({\n  films: selectFilmsList(state),\n  error: selectFilmsError(state),\n  isLoading: selectIsLoading(state),\n});\n\nexport default connect(mapStateToProps, { loadFilms })(FilmsPage);\n","import React from 'react';\nimport './style/index.scss';\nimport FilmsPage from './components/FilmsPage/index';\n\nconst App = () => (\n  <div className=\"App\">\n    <FilmsPage />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}